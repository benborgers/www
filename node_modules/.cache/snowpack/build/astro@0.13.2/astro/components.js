import 'node-fetch';
import { renderMarkdown } from '@astrojs/markdown-support';
import { h, Fragment } from './dist/internal/h.js';
export { default as Prism } from './components/Prism.astro.js';
import 'prismjs/components/index.js';
import '@astrojs/prism';
import 'prismjs';

const __astroRequestSymbol = Symbol('astro.request');
async function __render(props, ...children) {
  const Astro = {
    request: props[__astroRequestSymbol] || {},
    site: new URL('/', "http://benborgers.com"),
  };

  let {$scope,content,} = props;
let html = null; // This flow is only triggered if a user passes `<Markdown content={content} />`

if (content) {
  const {
    content: htmlContent
  } = await renderMarkdown(content, {
    mode: 'md',
    $: {
      scopedClassName: $scope
    }
  });
  html = htmlContent;
}
/*
  If we have rendered `html` for `content`, render that
  Otherwise, just render the slotted content
*/
  return h(Fragment, null, (html ? html : children));
}
var Markdown = { isAstroComponent: true, __render };

export { Markdown };
