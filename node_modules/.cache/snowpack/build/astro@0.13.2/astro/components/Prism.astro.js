import 'node-fetch';
import * as loadLanguages from 'prismjs/components/index.js';
import { addAstro } from '@astrojs/prism';
import Prism$1 from 'prismjs';
import { h, Fragment } from '../dist/internal/h.js';

const __astroRequestSymbol = Symbol('astro.request');
async function __render(props, ...children) {
  const Astro = {
    request: props[__astroRequestSymbol] || {},
    site: new URL('/', "http://benborgers.com"),
  };

  let {code,lang,} = props;
const languageMap = new Map([['ts', 'typescript']]);

if (lang == null) {
  console.warn('Prism.astro: No language provided.');
}

const ensureLoaded = lang => {
  if (lang && !Prism$1.languages[lang]) {
    loadLanguages([lang]);
  }
};

if (languageMap.has(lang)) {
  ensureLoaded(languageMap.get(lang));
} else if (lang === 'astro') {
  ensureLoaded('typescript');
  addAstro(Prism$1);
} else {
  ensureLoaded('markup-templating'); // Prism expects this to exist for a number of other langs

  ensureLoaded(lang);
}

if (lang && !Prism$1.languages[lang]) {
  console.warn(`Unable to load the language: ${lang}`);
}

const grammar = Prism$1.languages[lang];
let html = code;

if (grammar) {
  html = Prism$1.highlight(code, grammar, lang);
}

let className = lang ? `language-${lang}` : '';
  return h(Fragment, null, h("pre", {"class":((className) + ' astro-y5UYZ7uS'),},h("code", {"class":((className) + ' astro-y5UYZ7uS'),},(html))));
}
var Prism = { isAstroComponent: true, __render };



// `__renderPage()`: Render the contents of the Astro module as a page. This is a special flow,
// triggered by loading a component directly by URL.
async function __renderPage({request, children, props}) {
  const currentChild = {
    isAstroComponent: true,
    layout: typeof __layout === 'undefined' ? undefined : __layout,
    content: typeof __content === 'undefined' ? undefined : __content,
    __render,
  };

  props[__astroRequestSymbol] = request;
  const childBodyResult = await currentChild.__render(props, children);

  // find layout, if one was given.
  if (currentChild.layout) {
    return currentChild.layout({
      request,
      props: {content: currentChild.content},
      children: [childBodyResult],
    });
  }

  return childBodyResult;
}

export default Prism;
export { __renderPage };
