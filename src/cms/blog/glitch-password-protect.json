{
  "published": true,
  "date": "2020-09-30T02:17:21.344Z",
  "title": "How to password protect your Glitch site",
  "slug": "glitch-password-protect",
  "body": "You can password protect a Glitch site if you're writing Node.js (which means you've got a `package.json` file). \n\nWe're going to be using `express`, the default Node.js server framework that new Glitch projects use. We're also going to be using a technique called **Basic authentication**, which is built into every browser. \n\nThis is what it'll look like: \n\n![](/assets/basic-auth.png)\n\nLet's say we want to password-protect this secret admin route: \n\n```javascript\nconst express = require('express')\nconst app = express()\n\napp.get('/admin', (req, res) => {\n  res.send('Top secret stuff here')\n})\n```\n\nHere's a code snippet of how to do it, and then I'll explain how it works:\n\n```javascript\napp.get('/admin', (req, res) => {\n  const reject = () => {\n    res.setHeader('www-authenticate', 'Basic')\n    res.sendStatus(401)\n  }\n  \n  const authorization = req.headers.authorization\n  \n  if(!authorization) {\n    return reject()\n  }\n  \n  const [username, password] = Buffer.from(authorization.replace('Basic ', ''), 'base64').toString().split(':')\n  \n  if(! (username === 'ben' && password === 'my-favorite-password')) {\n    return reject()\n  }\n\n  res.send('Top secret stuff here')\n})\n```\n\nFirst, we create a function called `reject()`, which is used to prevent a person from viewing the page. We set a header that instructs the browser to ask for a username and password, and otherwise we send a `401 Unauthorized` error code. \n\nIf the visitor types a username and password into the prompt, it'll be in a header called `authorization` in this format, but everything after `Basic ` is encoded in base64 format:\n\n```\nBasic myusername:mypassword\n```\n\nSo first, if there's no `authorization` header, we immediately `reject()` the request as unauthorized. This can happen if the user clicks \"cancel\" on the login form. \n\nOtherwise, we first take the `authorization` header and remove the portion that says `Basic ` (including the space after). We then decode it from base64 format to text using `Buffer.from()`, then turn it into a string and split the `:` separating the username and password. Since this split creates an array, we can assign the parts of the array to the variables `username` and `password. \n\nLastly, we check whether the `username` and `password` are what we expect them to be. If they aren't we `reject()`. \n\nIf the request has made it all the way to the end, it has an `authorization` header and the correct username and password. We can finish the request by sending back any data or file, knowing that they have the correct username and password to view it. ",
  "description": "You can use basic authorization (or \"basic auth\") to password-protect a Glitch site that's using the Express web server. This post includes a code snippet showing you how to do it. "
}