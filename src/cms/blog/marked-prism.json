{
  "published": true,
  "date": "2020-10-01T17:05:19.834Z",
  "title": "How to use Marked and Prism.js together",
  "slug": "marked-prism",
  "body": "For this blog, I wanted to parse the blog posts (written in markdown) and also add syntax highlighting to the code blocks so they can have nice readable colors.\n\nI'm using [Marked](https://github.com/markedjs/marked) to parse markdown into HTML, and [Prism](https://github.com/PrismJS/prism) to parse code blocks within that markdown.  \n\nI wrote this `parseMarkdown()` function to turn raw markdown into HTML with syntax-highlighted code blocks: \n\n```javascript\nconst marked = require('marked')\nconst prism = require('prismjs')\n\nrequire('prismjs/components/prism-markup-templating')\nrequire('prismjs/components/prism-css')\nrequire('prismjs/components/prism-php')\nrequire('prismjs/components/prism-json')\nrequire('prismjs/components/prism-javascript')\nrequire('prismjs/components/prism-jsx')\nrequire('prismjs/components/prism-bash')\nrequire('prismjs/components/prism-yaml')\nrequire('prismjs/components/prism-toml')\n\nmarked.setOptions({\n  highlight: (code, lang) => {\n    if(prism.languages[lang]) {\n      return prism.highlight(code, prism.languages[lang], lang)\n    } else {\n      return code\n    }\n  }\n})\n\nconst parseMarkdown = text => marked.parse(text)\n```\n\nFirst, we import both `marked` and `prism`. \n\nThen, we import different prism \"components\" that allow it to parse different languages. The full list of components you can import is [here](https://github.com/PrismJS/prism/tree/master/components). \n\nThen, we tell Marked that we want to handle code highlighting ourselves. If the code block has a language indicated, like this: \n\n````markdown\n```javascript\n// we've indicated that this block is javascript\n```\n````\n\n**and** Prism is able to parse it (tested by seeing whether it's in `prism.languages`), we use `prism.highlight()` to break the code up into syntax-highlighted pieces. Otherwise, we just return the code itself.\n\nNow, if you look at the outputted HTML from the `parseMarkdown()` function, the code blocks are invisibly split up with classes that allow you to use [any Prism CSS theme](https://github.com/PrismJS/prism-themes) to style them.  ",
  "description": "You can take content or blog posts written in markdown and transform them into HTML with syntax highlighting using the Marked and Prism packages together. You just have to set options on Marked telling it to use Prism. "
}