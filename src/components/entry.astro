---
import type { CollectionEntry } from "astro:content";
import { getRelatedPosts } from "../lib/related-posts";
import Prose from "./prose.astro";

interface Props {
  entry: CollectionEntry<"posts"> | CollectionEntry<"pages">;
  preview?: boolean;
}

const { entry } = Astro.props;

const { Content } = await entry.render();

const relatedPosts = await getRelatedPosts(entry.slug);

const showRelatedPosts =
  entry.collection === "posts" && relatedPosts.length > 0;
const showNewsletterForm =
  entry.collection === "posts" && entry.data.unlisted === false;
---

<div class="max-sm:mt-4"></div>

{
  entry.collection === "posts" && entry.data.draft && (
    <p class="mb-4 bg-rose-100 text-rose-950 px-2 py-0.5 font-medium max-w-max">
      <span class="sm:hidden">You’re reading a draft post.</span>
      <span class="max-sm:hidden">
        You’re reading a draft post that’s still being written.
      </span>
    </p>
  )
}

{
  entry.collection === "posts" && (
    <>
      <h1 class="text-gray-900 text-3xl sm:text-4xl font-extrabold">
        {entry.data.title}
      </h1>

      {entry.data.date && (
        <time class="block mt-2 text-sm font-semibold text-gray-400">
          {entry.data.date.toLocaleString("en-US", {
            timeZone: "UTC",
            month: "long",
            day: "numeric",
            year: "numeric",
          })}
        </time>
      )}

      {entry.data.cover_image && (
        <div class="mt-7 p-12 bg-white">
          <img src={entry.data.cover_image} alt="" />
        </div>
      )}
    </>
  )
}

<div class:list={[entry.collection === "posts" ? "mt-7" : "mt-2"]}>
  <Prose>
    <Content />
  </Prose>
</div>

{(showRelatedPosts || showNewsletterForm) && <div class="mt-20" />}

<div class="space-y-14">
  {
    showRelatedPosts && (
      <section class="relative">
        <p class="absolute -top-5 -left-2 -rotate-2 bg-white text-gray-600 italic text-sm font-medium px-2 py-0.5 border border-gray-200 max-w-max shadow-xs">
          Related posts
        </p>
        <div class="flex max-sm:flex-wrap gap-x-1.5 gap-y-1.5">
          {relatedPosts.map((post) => (
            <a
              href={`/${post.slug}`}
              class="flex flex-col bg-white shadow-sm px-2 py-1.5 border border-gray-200"
            >
              <p class="text-lg font-serif underline decoration-gray-200 leading-[1.3]">
                {post.data.title}
              </p>
              <p class="mt-auto pt-0.5 text-sm font-medium text-gray-400 whitespace-nowrap">
                {post.data.date!.toLocaleString("en-US", {
                  timeZone: "UTC",
                  month: "long",
                  day: "numeric",
                  year: "numeric",
                })}
              </p>
            </a>
          ))}
        </div>
      </section>
    )
  }

  {
    showNewsletterForm && (
      <div class="relative">
        <p class="absolute -top-4.5 -left-2 -rotate-2 bg-white text-gray-600 italic text-sm font-medium px-2 py-0.5 border border-gray-200 max-w-max shadow-xs">
          Subscribe to my newsletter for more!
        </p>
        <div class="bg-white shadow-sm border border-gray-200 px-4 pt-4.5 pb-3">
          <form
            action="https://buttondown.com/api/emails/embed-subscribe/benborgers"
            method="post"
            target="popupwindow"
            class="grid grid-cols-[1fr_auto] gap-2"
          >
            <input
              type="email"
              name="email"
              placeholder="your@email.com"
              class="border border-gray-200 bg-gray-50 px-2.5 py-1.5 text-gray-900 placeholder:text-gray-400 focus:outline-none focus:border-gray-300"
              required
            />
            <button class="bg-gray-300 text-gray-700 h-full px-3 sm:px-4 text-sm font-semibold">
              Subscribe
            </button>
          </form>
        </div>
      </div>
    )
  }
</div>
