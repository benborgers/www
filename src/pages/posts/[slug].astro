---
import { Code } from 'astro/components'
import ghost from '../../lib/ghost'

export async function getStaticPaths() {
  const posts = Astro.fetchContent('../../../posts/*.md')

  const localPosts = posts
    .map(post => {
      const slug = post.file.pathname
        .replace('/posts/', '')
        .replace('.md', '')

      return {
        params: { slug },
        props: {
          type: 'file',
          post: {
            title: post.title,
            date: post.date,
            html: post.content.html
          }
        }
      }
    })

  const ghostPosts = (await ghost('posts')).posts
    .map(post => {
      return {
        params: { slug: post.slug },
        props: {
          type: 'ghost',
          post: {
            title: post.title,
            date: post.published_at,
            html: post.html
          }
        }
      }
    })

  return [...localPosts, ...ghostPosts]
}

const { type, post } = Astro.props
---

<h1>{post.title}</h1>
<p>{
  new Date(post.date).toLocaleString("en-US", {
    timeZone: "UTC",
    month: "long",
    day: "numeric",
    year: "numeric",
  })
}</p>

{type === 'file' && (
  <div set:html={post.html} />
)}

{type === 'ghost' && (() => {
  const pieces = post.html.split(/<\/?pre>/)

  console.log(pieces)

  return pieces.map(piece => {
    if (piece.startsWith('<code')) {
      const language = piece.match(/class="language-(.+?)"/)[1]
      const code = piece.match(/<code .*>(.+?)<\/code>/s)[1]
        .replace(/&lt;/g, '<')
        .replace(/&gt;/g, '>')

      return <Code code={code} lang={language} theme="dracula" />
    }

    return <Fragment set:html={piece} />
  })
})}
